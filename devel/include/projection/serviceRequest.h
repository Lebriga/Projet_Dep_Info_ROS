// Generated by gencpp from file projection/serviceRequest.msg
// DO NOT EDIT!


#ifndef PROJECTION_MESSAGE_SERVICEREQUEST_H
#define PROJECTION_MESSAGE_SERVICEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace projection
{
template <class ContainerAllocator>
struct serviceRequest_
{
  typedef serviceRequest_<ContainerAllocator> Type;

  serviceRequest_()
    : a(0)
    , b(0)
    , c(0)
    , d(0)
    , e(0)
    , f(0)  {
    }
  serviceRequest_(const ContainerAllocator& _alloc)
    : a(0)
    , b(0)
    , c(0)
    , d(0)
    , e(0)
    , f(0)  {
  (void)_alloc;
    }



   typedef int64_t _a_type;
  _a_type a;

   typedef int64_t _b_type;
  _b_type b;

   typedef int64_t _c_type;
  _c_type c;

   typedef int64_t _d_type;
  _d_type d;

   typedef int64_t _e_type;
  _e_type e;

   typedef int64_t _f_type;
  _f_type f;




  typedef boost::shared_ptr< ::projection::serviceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::projection::serviceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct serviceRequest_

typedef ::projection::serviceRequest_<std::allocator<void> > serviceRequest;

typedef boost::shared_ptr< ::projection::serviceRequest > serviceRequestPtr;
typedef boost::shared_ptr< ::projection::serviceRequest const> serviceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::projection::serviceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::projection::serviceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace projection

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::projection::serviceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::projection::serviceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::projection::serviceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::projection::serviceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::projection::serviceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::projection::serviceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::projection::serviceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "44df49721ed7faf4a1aaf2bb88b86d56";
  }

  static const char* value(const ::projection::serviceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x44df49721ed7faf4ULL;
  static const uint64_t static_value2 = 0xa1aaf2bb88b86d56ULL;
};

template<class ContainerAllocator>
struct DataType< ::projection::serviceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "projection/serviceRequest";
  }

  static const char* value(const ::projection::serviceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::projection::serviceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 a\n\
int64 b\n\
int64 c\n\
int64 d\n\
int64 e\n\
int64 f\n\
\n\
";
  }

  static const char* value(const ::projection::serviceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::projection::serviceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.a);
      stream.next(m.b);
      stream.next(m.c);
      stream.next(m.d);
      stream.next(m.e);
      stream.next(m.f);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct serviceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::projection::serviceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::projection::serviceRequest_<ContainerAllocator>& v)
  {
    s << indent << "a: ";
    Printer<int64_t>::stream(s, indent + "  ", v.a);
    s << indent << "b: ";
    Printer<int64_t>::stream(s, indent + "  ", v.b);
    s << indent << "c: ";
    Printer<int64_t>::stream(s, indent + "  ", v.c);
    s << indent << "d: ";
    Printer<int64_t>::stream(s, indent + "  ", v.d);
    s << indent << "e: ";
    Printer<int64_t>::stream(s, indent + "  ", v.e);
    s << indent << "f: ";
    Printer<int64_t>::stream(s, indent + "  ", v.f);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROJECTION_MESSAGE_SERVICEREQUEST_H
